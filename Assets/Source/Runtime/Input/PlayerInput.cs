//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Source/Runtime/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Slime"",
            ""id"": ""8609e6aa-4c4d-4582-80ea-4016a840af9f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""34b1cb7c-0829-4248-90fc-24a533fe3eae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate Ability"",
                    ""type"": ""Button"",
                    ""id"": ""31bc7134-2c66-4c41-b29c-fff6e9a0dae6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change State"",
                    ""type"": ""Button"",
                    ""id"": ""43c65dd5-70e6-42b6-b1c6-a4ae1d5b954b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""60798fd8-d21a-437d-8c69-4c6ebbc72c96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""dfb03369-881d-4d2b-b86f-58120e68d871"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6fbc5afd-1955-461a-8430-b474e811e52f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""171c6f97-1a1f-4b21-8346-a3e1316549bd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d0079ff-7e44-41aa-8ab7-0705f63c3b70"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee90994c-b658-4a9a-865d-b0aef6fe7ed1"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ac36a44-056e-4576-b0dc-bcf7f54f202f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Slime
        m_Slime = asset.FindActionMap("Slime", throwIfNotFound: true);
        m_Slime_Movement = m_Slime.FindAction("Movement", throwIfNotFound: true);
        m_Slime_ActivateAbility = m_Slime.FindAction("Activate Ability", throwIfNotFound: true);
        m_Slime_ChangeState = m_Slime.FindAction("Change State", throwIfNotFound: true);
        m_Slime_Jump = m_Slime.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Slime
    private readonly InputActionMap m_Slime;
    private ISlimeActions m_SlimeActionsCallbackInterface;
    private readonly InputAction m_Slime_Movement;
    private readonly InputAction m_Slime_ActivateAbility;
    private readonly InputAction m_Slime_ChangeState;
    private readonly InputAction m_Slime_Jump;
    public struct SlimeActions
    {
        private @PlayerInput m_Wrapper;
        public SlimeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Slime_Movement;
        public InputAction @ActivateAbility => m_Wrapper.m_Slime_ActivateAbility;
        public InputAction @ChangeState => m_Wrapper.m_Slime_ChangeState;
        public InputAction @Jump => m_Wrapper.m_Slime_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Slime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SlimeActions set) { return set.Get(); }
        public void SetCallbacks(ISlimeActions instance)
        {
            if (m_Wrapper.m_SlimeActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_SlimeActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_SlimeActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_SlimeActionsCallbackInterface.OnMovement;
                @ActivateAbility.started -= m_Wrapper.m_SlimeActionsCallbackInterface.OnActivateAbility;
                @ActivateAbility.performed -= m_Wrapper.m_SlimeActionsCallbackInterface.OnActivateAbility;
                @ActivateAbility.canceled -= m_Wrapper.m_SlimeActionsCallbackInterface.OnActivateAbility;
                @ChangeState.started -= m_Wrapper.m_SlimeActionsCallbackInterface.OnChangeState;
                @ChangeState.performed -= m_Wrapper.m_SlimeActionsCallbackInterface.OnChangeState;
                @ChangeState.canceled -= m_Wrapper.m_SlimeActionsCallbackInterface.OnChangeState;
                @Jump.started -= m_Wrapper.m_SlimeActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_SlimeActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_SlimeActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_SlimeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ActivateAbility.started += instance.OnActivateAbility;
                @ActivateAbility.performed += instance.OnActivateAbility;
                @ActivateAbility.canceled += instance.OnActivateAbility;
                @ChangeState.started += instance.OnChangeState;
                @ChangeState.performed += instance.OnChangeState;
                @ChangeState.canceled += instance.OnChangeState;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public SlimeActions @Slime => new SlimeActions(this);
    public interface ISlimeActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnActivateAbility(InputAction.CallbackContext context);
        void OnChangeState(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
